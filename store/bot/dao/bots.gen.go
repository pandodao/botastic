// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"github.com/pandodao/botastic/core"
)

func newBot(db *gorm.DB, opts ...gen.DOOption) bot {
	_bot := bot{}

	_bot.botDo.UseDB(db, opts...)
	_bot.botDo.UseModel(&core.Bot{})

	tableName := _bot.botDo.TableName()
	_bot.ALL = field.NewAsterisk(tableName)
	_bot.ID = field.NewUint64(tableName, "id")
	_bot.Name = field.NewString(tableName, "name")
	_bot.UserID = field.NewUint64(tableName, "user_id")
	_bot.Prompt = field.NewString(tableName, "prompt")
	_bot.BoundaryPrompt = field.NewString(tableName, "boundary_prompt")
	_bot.Model = field.NewString(tableName, "model")
	_bot.MaxTurnCount = field.NewInt(tableName, "max_turn_count")
	_bot.ContextTurnCount = field.NewInt(tableName, "context_turn_count")
	_bot.Temperature = field.NewFloat32(tableName, "temperature")
	_bot.MiddlewareJson = field.NewField(tableName, "middleware_json")
	_bot.Public = field.NewBool(tableName, "public")
	_bot.CreatedAt = field.NewTime(tableName, "created_at")
	_bot.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bot.DeletedAt = field.NewTime(tableName, "deleted_at")

	_bot.fillFieldMap()

	return _bot
}

type bot struct {
	botDo

	ALL              field.Asterisk
	ID               field.Uint64
	Name             field.String
	UserID           field.Uint64
	Prompt           field.String
	BoundaryPrompt   field.String
	Model            field.String
	MaxTurnCount     field.Int
	ContextTurnCount field.Int
	Temperature      field.Float32
	MiddlewareJson   field.Field
	Public           field.Bool
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Time

	fieldMap map[string]field.Expr
}

func (b bot) Table(newTableName string) *bot {
	b.botDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bot) As(alias string) *bot {
	b.botDo.DO = *(b.botDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bot) updateTableName(table string) *bot {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewUint64(table, "id")
	b.Name = field.NewString(table, "name")
	b.UserID = field.NewUint64(table, "user_id")
	b.Prompt = field.NewString(table, "prompt")
	b.BoundaryPrompt = field.NewString(table, "boundary_prompt")
	b.Model = field.NewString(table, "model")
	b.MaxTurnCount = field.NewInt(table, "max_turn_count")
	b.ContextTurnCount = field.NewInt(table, "context_turn_count")
	b.Temperature = field.NewFloat32(table, "temperature")
	b.MiddlewareJson = field.NewField(table, "middleware_json")
	b.Public = field.NewBool(table, "public")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewTime(table, "deleted_at")

	b.fillFieldMap()

	return b
}

func (b *bot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bot) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 14)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["prompt"] = b.Prompt
	b.fieldMap["boundary_prompt"] = b.BoundaryPrompt
	b.fieldMap["model"] = b.Model
	b.fieldMap["max_turn_count"] = b.MaxTurnCount
	b.fieldMap["context_turn_count"] = b.ContextTurnCount
	b.fieldMap["temperature"] = b.Temperature
	b.fieldMap["middleware_json"] = b.MiddlewareJson
	b.fieldMap["public"] = b.Public
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
}

func (b bot) clone(db *gorm.DB) bot {
	b.botDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bot) replaceDB(db *gorm.DB) bot {
	b.botDo.ReplaceDB(db)
	return b
}

type botDo struct{ gen.DO }

type IBotDo interface {
	WithContext(ctx context.Context) IBotDo

	GetBot(ctx context.Context, id uint64) (result *core.Bot, err error)
	GetBotsByUserID(ctx context.Context, userID uint64) (result []*core.Bot, err error)
	GetPublicBots(ctx context.Context) (result []*core.Bot, err error)
	CreateBot(ctx context.Context, bot *core.Bot) (result uint64, err error)
	UpdateBot(ctx context.Context, bot *core.Bot) (err error)
	DeleteBot(ctx context.Context, id uint64) (err error)
}

// SELECT *
// FROM @@table WHERE
//
//	"id"=@id AND "deleted_at" IS NULL
//
// LIMIT 1
func (b botDo) GetBot(ctx context.Context, id uint64) (result *core.Bot, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM bots WHERE \"id\"=? AND \"deleted_at\" IS NULL LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT *
// FROM @@table WHERE
//
//	"user_id"=@userID AND "deleted_at" IS NULL
func (b botDo) GetBotsByUserID(ctx context.Context, userID uint64) (result []*core.Bot, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, userID)
	generateSQL.WriteString("SELECT * FROM bots WHERE \"user_id\"=? AND \"deleted_at\" IS NULL ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT *
// FROM @@table WHERE
//
//	"public"='t' AND "deleted_at" IS NULL
func (b botDo) GetPublicBots(ctx context.Context) (result []*core.Bot, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM bots WHERE \"public\"='t' AND \"deleted_at\" IS NULL ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table
//
//		("user_id", "name", "model", "prompt", "boundary_prompt", "temperature",
//		 "max_turn_count", "context_turn_count",
//	 "middleware_json", "public",
//	 "created_at", "updated_at")
//
// VALUES
//
//		(@bot.UserID, @bot.Name, @bot.Model, @bot.Prompt, @bot.BoundaryPrompt, @bot.Temperature,
//	 @bot.MaxTurnCount, @bot.ContextTurnCount,
//	 @bot.MiddlewareJson, @bot.Public,
//	 NOW(), NOW())
//
// RETURNING "id"
func (b botDo) CreateBot(ctx context.Context, bot *core.Bot) (result uint64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, bot.UserID)
	params = append(params, bot.Name)
	params = append(params, bot.Model)
	params = append(params, bot.Prompt)
	params = append(params, bot.BoundaryPrompt)
	params = append(params, bot.Temperature)
	params = append(params, bot.MaxTurnCount)
	params = append(params, bot.ContextTurnCount)
	params = append(params, bot.MiddlewareJson)
	params = append(params, bot.Public)
	generateSQL.WriteString("INSERT INTO bots (\"user_id\", \"name\", \"model\", \"prompt\", \"boundary_prompt\", \"temperature\", \"max_turn_count\", \"context_turn_count\", \"middleware_json\", \"public\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW()) RETURNING \"id\" ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
//
//		{{set}}
//			"name"=@bot.Name,
//			"model"=@bot.Model,
//			"prompt"=@bot.Prompt,
//			"boundary_prompt"=@bot.BoundaryPrompt,
//			"temperature"=@bot.Temperature,
//			"max_turn_count"=@bot.MaxTurnCount,
//			"context_turn_count"=@bot.ContextTurnCount,
//			"middleware_json"=@bot.MiddlewareJson,
//	  "public"=@bot.Public,
//			"updated_at"=NOW()
//		{{end}}
//
// WHERE
//
//	"id"=@bot.ID AND "deleted_at" is NULL
func (b botDo) UpdateBot(ctx context.Context, bot *core.Bot) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE bots ")
	var setSQL0 strings.Builder
	params = append(params, bot.Name)
	params = append(params, bot.Model)
	params = append(params, bot.Prompt)
	params = append(params, bot.BoundaryPrompt)
	params = append(params, bot.Temperature)
	params = append(params, bot.MaxTurnCount)
	params = append(params, bot.ContextTurnCount)
	params = append(params, bot.MiddlewareJson)
	params = append(params, bot.Public)
	setSQL0.WriteString("\"name\"=?, \"model\"=?, \"prompt\"=?, \"boundary_prompt\"=?, \"temperature\"=?, \"max_turn_count\"=?, \"context_turn_count\"=?, \"middleware_json\"=?, \"public\"=?, \"updated_at\"=NOW() ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, bot.ID)
	generateSQL.WriteString("WHERE \"id\"=? AND \"deleted_at\" is NULL ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
//
//	{{set}}
//		"deleted_at"=NOW()
//	{{end}}
//
// WHERE
//
//	"id"=@id AND "deleted_at" is NULL
func (b botDo) DeleteBot(ctx context.Context, id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE bots ")
	var setSQL0 strings.Builder
	setSQL0.WriteString("\"deleted_at\"=NOW() ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, id)
	generateSQL.WriteString("WHERE \"id\"=? AND \"deleted_at\" is NULL ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b botDo) WithContext(ctx context.Context) IBotDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b *botDo) withDO(do gen.Dao) *botDo {
	b.DO = *do.(*gen.DO)
	return b
}

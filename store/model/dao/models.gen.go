// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/pandodao/botastic/core"
)

func newModel(db *gorm.DB, opts ...gen.DOOption) model {
	_model := model{}

	_model.modelDo.UseDB(db, opts...)
	_model.modelDo.UseModel(&core.Model{})

	tableName := _model.modelDo.TableName()
	_model.ALL = field.NewAsterisk(tableName)
	_model.ID = field.NewUint64(tableName, "id")
	_model.Provider = field.NewString(tableName, "provider")
	_model.ProviderModel = field.NewString(tableName, "provider_model")
	_model.MaxToken = field.NewInt(tableName, "max_token")
	_model.PromptPriceUSD = field.NewField(tableName, "prompt_price_usd")
	_model.CompletionPriceUSD = field.NewField(tableName, "completion_price_usd")
	_model.PriceUSD = field.NewField(tableName, "price_usd")
	_model.CustomConfig = field.NewField(tableName, "custom_config")
	_model.Function = field.NewString(tableName, "function")
	_model.CreatedAt = field.NewTime(tableName, "created_at")
	_model.DeletedAt = field.NewTime(tableName, "deleted_at")

	_model.fillFieldMap()

	return _model
}

type model struct {
	modelDo

	ALL                field.Asterisk
	ID                 field.Uint64
	Provider           field.String
	ProviderModel      field.String
	MaxToken           field.Int
	PromptPriceUSD     field.Field
	CompletionPriceUSD field.Field
	PriceUSD           field.Field
	CustomConfig       field.Field
	Function           field.String
	CreatedAt          field.Time
	DeletedAt          field.Time

	fieldMap map[string]field.Expr
}

func (m model) Table(newTableName string) *model {
	m.modelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m model) As(alias string) *model {
	m.modelDo.DO = *(m.modelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *model) updateTableName(table string) *model {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint64(table, "id")
	m.Provider = field.NewString(table, "provider")
	m.ProviderModel = field.NewString(table, "provider_model")
	m.MaxToken = field.NewInt(table, "max_token")
	m.PromptPriceUSD = field.NewField(table, "prompt_price_usd")
	m.CompletionPriceUSD = field.NewField(table, "completion_price_usd")
	m.PriceUSD = field.NewField(table, "price_usd")
	m.CustomConfig = field.NewField(table, "custom_config")
	m.Function = field.NewString(table, "function")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.DeletedAt = field.NewTime(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *model) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *model) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["id"] = m.ID
	m.fieldMap["provider"] = m.Provider
	m.fieldMap["provider_model"] = m.ProviderModel
	m.fieldMap["max_token"] = m.MaxToken
	m.fieldMap["prompt_price_usd"] = m.PromptPriceUSD
	m.fieldMap["completion_price_usd"] = m.CompletionPriceUSD
	m.fieldMap["price_usd"] = m.PriceUSD
	m.fieldMap["custom_config"] = m.CustomConfig
	m.fieldMap["function"] = m.Function
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m model) clone(db *gorm.DB) model {
	m.modelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m model) replaceDB(db *gorm.DB) model {
	m.modelDo.ReplaceDB(db)
	return m
}

type modelDo struct{ gen.DO }

type IModelDo interface {
	WithContext(ctx context.Context) IModelDo

	GetModel(ctx context.Context, name string) (result *core.Model, err error)
	GetModelsByFunction(ctx context.Context, f string) (result []*core.Model, err error)
	CreateModel(ctx context.Context, model *core.Model) (err error)
}

// SELECT *
// FROM @@table WHERE
//
//	"deleted_at" IS NULL AND CONCAT(provider, ':', provider_model) = @name;
func (m modelDo) GetModel(ctx context.Context, name string) (result *core.Model, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM models WHERE \"deleted_at\" IS NULL AND CONCAT(provider, ':', provider_model) = ?; ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT *
// FROM @@table WHERE
//
//	"deleted_at" IS NULL
//
// {{if f !=""}}
//
//	AND function=@f
//
// {{end}}
func (m modelDo) GetModelsByFunction(ctx context.Context, f string) (result []*core.Model, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM models WHERE \"deleted_at\" IS NULL ")
	if f != "" {
		params = append(params, f)
		generateSQL.WriteString("AND function=? ")
	}

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table
//
//	("provider", "provider_model", "max_token", "prompt_price_usd", "completion_price_usd", "price_usd", "custom_config", "function", "created_at")
//
// VALUES
//
//	(@model.Provider, @model.ProviderModel, @model.MaxToken, @model.PromptPriceUSD, @model.CompletionPriceUSD, @model.PriceUSD, @model.CustomConfig, @model.Function, NOW())
func (m modelDo) CreateModel(ctx context.Context, model *core.Model) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, model.Provider)
	params = append(params, model.ProviderModel)
	params = append(params, model.MaxToken)
	params = append(params, model.PromptPriceUSD)
	params = append(params, model.CompletionPriceUSD)
	params = append(params, model.PriceUSD)
	params = append(params, model.CustomConfig)
	params = append(params, model.Function)
	generateSQL.WriteString("INSERT INTO models (\"provider\", \"provider_model\", \"max_token\", \"prompt_price_usd\", \"completion_price_usd\", \"price_usd\", \"custom_config\", \"function\", \"created_at\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW()) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m modelDo) WithContext(ctx context.Context) IModelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m *modelDo) withDO(do gen.Dao) *modelDo {
	m.DO = *do.(*gen.DO)
	return m
}
